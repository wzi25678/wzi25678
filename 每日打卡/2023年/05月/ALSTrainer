import OfflineRecommender.MONGODB_RATING_COLLECTION
import org.apache.spark.SparkConf
import org.apache.spark.mllib.recommendation.{ALS, MatrixFactorizationModel, Rating}
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SparkSession
import OfflineRecommender.MONGODB_RATING_COLLECTION
import breeze.numerics.sqrt



/**
 *
 * @param uid
 * @param mid
 * @param score
 * @param timestamp
 */
//基于评分数据的LFM，只需要rating数据
case class MovieRating(uid:Int,mid:Int,score:Double,timestamp:Int)

object ALSTrainer {

  def getRMSE(model: MatrixFactorizationModel, testData: RDD[Rating]):Double = {
    //计算预测评分
    val userProducts = testData.map(item => (item.user,item.product))
    val predictRating = model.predict(userProducts)

    //以uid，mid作为外键，inner join实际观测值和预测值
    val observed = testData.map(item => (item.user,item.product),item.rating)
    val prodict = predictRating.map(item => ((item.user,item.product),item.rating))

    //内连接得到(uid,mid),(actual,predict)
    sqrt(
      observed.join(prodict).map{
        case ((uid,mid),(actual,pre)) =>
          val err = actual - pre
          err * err
      }.mean()

    )
  }

  def adjustALSParam(trainingRDD: RDD[Rating], testRDD: RDD[Rating]) = {
    var result = for(rank <- Array(20,50,100);lambda <- Array(0.001,0.01,0.1))
      yield{
        val model = ALS.train(trainingRDD,rank,50,lambda)
        val rmse =  getRMSE(model,testData)
        (rank,lambda,rmse)
      }
    //控制台打印输出最优参数
    print(result.minBy(_._3))
  }

  def main(args: Array[String]): Unit = {
    var config = Map(
      //创建自己的MongoDB，ES，然后看一下url以及主机，端口 等信息
      "spark.cores" -> "local[*]",
      "mongo.uri" -> "mongodb://localhost:27017/recommender",
      "mongo.db" -> "recommender"
      //      "es.httpHosts" -> "localhost:9200",
      //      "es.transportHosts" -> "localhost:9300",
      //      "es.index" -> "recommender",
      //      "es.cluster.name" -> "elasticsearch"
    )
    val sparkConf = new SparkConf().setMaster(config("spark.cores")).setAppName("OfflineRecommmender")

    //创建一个SparkSession
    val spark = SparkSession.builder().config(sparkConf).getOrCreate()

    import spark.implicits._  //     _  即全部都引用
    implicit val mongoConfig = MongoConfig(config("mongo.uri"),config("mongo.db"))

    //加载评分数据
    val ratingRDD = spark.read
      .option("uri", mongoConfig.uri)
      .option("collection", MONGODB_RATING_COLLECTION)
      .format("com.mongodb.spark.sql")
      .load()
              //这里得对应调用上面的第32行，（ import spark.implicits._  //     _  即全部都引用）
      .as[MovieRating]
      .rdd
      .map(rating => (rating.uid, rating.mid, rating.score)) //转化成rdd，并且去掉时间戳
      .cache()

    //随机切分数据集，生成训练集和测试集
    val splits = ratingRDD.randomSplit(Array(0.8,0.2))
    val trainingRDD = splits(0)
    val testRDD = splits(1)

    //模型参数的选择，输出最优参数
    adjustALSParam(trainingRDD,testRDD)

    spark.close()


  }//def main(args: Array[String]): Unit =


}
