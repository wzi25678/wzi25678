
class K_Means(object):
    #初始化，参数为n_clusters(K)，迭代次数为max_iter、初始质心为centroids
    def __init__(self,n_clusters=5,max_iter=300,centroids=[]):
        self.n_clusters = n_clusters
        self.max_iter = max_iter
        self.centroids = np.array(centroids,dtype = np.float_)
    
    #训练模型方法，K-Means聚类过程，传入原始数据
    def fit(self,data):
        #假如没有指定初始质心，就得随机选取data中的点作为初始质心
        if(self.centroids.shape == (0,)):
            #从data中随机生成0到data行数的6个整数，作为索引
            self.centroids = data[np.random.randint(0,data.shape[0],self.n_clusters),:]
        
        
        #开始迭代
        for i in range(self.max_iter):
            #1.计算距离矩阵，得到的是一个100*6的矩阵
            distances = cdist(data,self.centroids)
            
            #2.对距离按由近到远排序，选取最近的质心点的类别，作为当前点的分类
            c_ind = np.argmin(distances,axis=1)
            
            #3.对每一类别数据进行均值计算，更新质心点坐标
            for i in range(self.n_clusters):
                #排除掉没有出现在c_ind里面的类别
                if i in c_ind:
                    #选出所有类别是i的点，取data里面坐标的均值，更新第i个质心
                    self.centroids[i] = np.mean(data[c_ind==i],axis=0)
                    
                    
        #实现预测方法
        def predictResult(self,samples):
            #跟上面一样，先计算距离矩阵，然后选取距离最近的那个质心的类别
            distances = cdist(samples,self.centroids)
            c_ind = np.argmin(distances,axis=1)
            
            return c_ind        
