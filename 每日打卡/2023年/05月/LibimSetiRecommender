package Mahout实战.第05章;

import org.apache.mahout.cf.taste.common.Refreshable;
import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.common.FastIDSet;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.IDRescorer;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

import java.io.IOException;
import java.util.Collection;
import java.util.List;

import static org.apache.mahout.cf.taste.web.RecommenderWrapper.readResourceToTempFile;


public class LibimSetiRecommender implements Recommender {
	private final Recommender delegate;
	private final DataModel model;
	private final FastIDSet men;
	private final FastIDSet women;
	private final FastIDSet usersRateMoreMen;
	private final FastIDSet usersRateLessMen;


	public LibimSetiRecommender() throws IOException,TasteException{
		this(new FileDataModel(readResourceToTempFile("ratings.dat")));
	}
	 public  LibimSetiRecommender(DataModel model) throws TasteException, IOException {
		 UserSimilarity similarity = new EuclideanDistanceSimilarity(model);
		 UserNeighborhood neighborhood = new NearestNUserNeighborhood(2,similarity,model);
		 delegate = new GenericUserBasedRecommender(model,neighborhood,similarity);
		 this.model = model;
		 FastIDSet[] menWomen = GenderRescorer.parseMenWomen(readResourceToTempFile("gender.dat"));
		 men = menWomen[0];
		 women = menWomen[1];
		 usersRateMoreMen = new FastIDSet(50000);
		 usersRateLessMen = new FastIDSet(50000);
		 //在所有推荐上使用GenderRescorer
	 }

	/**
	 * 		/men,women,userID,usersRateMoreMen,usersRateLessMen,userID,model
	 *
	 * @param  userID
	 * @param  howMany
	 * @return
	 * @throws TasteException
	 */
	@Override
	public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
		//在所有推荐上使用GenderRescorer
		IDRescorer rescorer = new GenderRescorer(men,women,userID,usersRateMoreMen,usersRateLessMen,userID,model);
		return delegate.recommend(userID,howMany,rescorer);
	}

	@Override
	public List<RecommendedItem> recommend(long userID, int howMany, boolean b) throws TasteException {
		return null;
	}

	/**
	 *
	 * @param userID
	 * @param howMany
	 * @param Rescorer
	 * @return
	 * @throws TasteException
	 */
	@Override
	public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer Rescorer) throws TasteException {
		return delegate.recommend(userID,howMany,Rescorer);
	}

	@Override
	public List<RecommendedItem> recommend(long  userID, int howMany, IDRescorer Rescorer, boolean b) throws TasteException {
		return null;
	}


	@Override
	public float estimatePreference(long userID, long itemID) throws TasteException {
		//重算估计偏好
		IDRescorer rescorer = new GenderRescorer(men,women,userID,usersRateMoreMen,usersRateLessMen,userID,model);
		return (float) rescorer.rescore(itemID,delegate.estimatePreference(userID,itemID));
	}

	@Override
	public void setPreference(long userID, long itemID, float value) throws TasteException {
		//委托给底层的推荐程序
		delegate.setPreference(userID,itemID,value);
	}

	@Override
	public void removePreference(long userID, long itemID) throws TasteException {
		delegate.removePreference(userID,itemID);
	}

	@Override
	public DataModel getDataModel() {
		return delegate.getDataModel();
	}

	@Override
	public void refresh(Collection<Refreshable> collection) {
		delegate.refresh(collection);
	}
}

