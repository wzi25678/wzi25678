package 蓝桥杯专题;

public class _2023试题B_与或异或 {
	private static int dp[][] = new int[10][10];
	private static int mp[][] = new int[10][10];
	private static int a [] = new int[12];
	private static int sum = 0;
	public static void main(String[] args) {

		dp[0][1] = 1;dp[0][2] = 0;dp[0][3] = 1;dp[0][4] = 0;dp[0][5] = 1;
		DFS(1);
		System.out.println(sum);

	}

	private static void DFS(int x) {
		if(x==11){
			for(int i=1;i<=4;i++) {
				mp[1][i]=a[i];
			}
			for(int i=1;i<=3;i++) {
				mp[2][i]=a[i+4];
			}
			for(int i=1;i<=2;i++) {
				mp[3][i]=a[i+7];
			}
			for(int i=1;i<=1;i++) {
				mp[4][i]=a[10];
			}
			for(int i=1;i<=4;i++){
				for(int j=1;j<=4-i+1;j++){
					if(mp[i][j]==0) {
						dp[i][j]=dp[i-1][j]|dp[i-1][j+1];
					}
					if(mp[i][j]==1) {
						dp[i][j]=dp[i-1][j]^dp[i-1][j+1];
					}
					if(mp[i][j]==2) {
						dp[i][j]=dp[i-1][j]&dp[i-1][j+1];
					}
				}
			}
			if(dp[4][1]==1) {
				sum++;
			}

		}
		a[x]=0;
		DFS(x+1);
		a[x]=1;
		DFS(x+1);
		a[x]=2;
		DFS(x+1);

	}
}
