CSDN首页
博客
下载
学习
社区
GitCode 
云服务
猿如意
算法
 搜索

会员中心 
足迹
动态
消息
创作中心
发布
蓝桥杯算法课《算法最美》笔记——8.贪心策略和动态规划

clap_code

已于 2022-02-05 17:40:19 修改

344
 收藏
文章标签： 算法 蓝桥杯 动态规划
版权
8 贪心策略与动态规划
动态规划和贪心算法都是一种递推算法，均用局部最优解来推导全剧最优解。

是对遍历解空间的一种优化

当问题具有最优子结构时，可用动态规划，而贪心算法是动态规划的特例。

8.1 贪心策略
-----遵循某种规则，不断贪心的选取当前最优策略，最终找到最优解

-----难点：当前最优未必是全局最优

8.1.1 硬币问题
有1，5，10，50，100，500元的硬币，各占c1, c5 , c10, c50, c100, c500枚

现在用这些硬币来支付A，最少需要多少枚硬币。

输入：

每一行有6个数字，代表不同硬币的个数

第二行为A，代表需要支付的A元

样例：

输入：

3 2 1 3 0 2

620

输出：

6

package 第八章_贪心算法和动态规划;

import java.util.Scanner;

public class 硬币支付问题 {
	static int[] cnts = new int[6];
	static int[] coins= {1,5,10,50,100,500};
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		for (int i = 0; i < 6; i++) {
			cnts[i] = scanner.nextInt();
		}
		int A = scanner.nextInt();
		int res = f(A,5);
		System.out.println(res);
	}
	private static int f(int A, int cur) {
		// TODO Auto-generated method stub
		if (A<=0) {
			return 0;
		}
		if (cur == 0) {
			return A;
		}
		int coinValue = coins[cur];
		int x = A/coinValue;//金额中有多少个coinValue
		int cnt = cnts[cur];//当前面值的硬币有cnt个
		int t = Math.min(x, cnt);
		return t+f(A-t*coinValue, cur-1);//用t个当前面值，剩下的继续处理。
	}
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
8.1.2 快速渡河
题目：有N个人，跨越一条河，一艘船只能装2个人，两个人到对岸后，要划回来一个人，每个人划船速度不同。某一种排列可用使得总时间最少。

输入：1 4 1 2 5 10
输出：17

import java.util.Arrays;
import java.util.Scanner;

public class 快速渡河 {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int T=sc.nextInt();  //T组数据
		for(int i=0;i<T;i++) {
			int n=sc.nextInt();
			int[] speed=new int[n];
			for(int j=0;j<n;j++) {
				speed[j]=sc.nextInt();
			}
			//排序
			Arrays.sort(speed);
			f(n,speed);  //对速度快慢进行排序
		}
	}
private static void f(int n,int[] speed) {
	int left=n;
	int ans=0;
	while(left>0) {
		if(left==1) { //只有一个人
			ans+=speed[0];
			break;
		}else if(left==2) {  //只有2人
			ans+=speed[1];
			break;
		}
		else if(left==3) { //有3个人
			ans+=speed[2]+speed[0]+speed[1];
			break;
		}
		else {
			//1,2出发，1返回，最后两名出发，2返回
			int s1=speed[1]+speed[0]+speed[left-1]+speed[1];
			//1,3出发，1返回，1,4出发，1返回，1,2过河
			int s2=speed[left-1]+speed[left-2]+2*speed[0]; //a+2b+c
			ans+=min(s1,s2);
			left-=2;  //左侧是渡河起点，left代表左侧的剩余人数
		}
	}
	System.out.println(ans);
}
private static int min(int s1, int s2) {
	return 0;
}
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
8.1.3 区间调度问题
题目：不同时间段有不同的任务，我们要在规定时间内完成最多的任务，任务时间不能交叉，更不能重合。

选结束时间是最早的，才是最符合条件的。

输入：5 1 2 4 6 8 3 5 7 9 10

输出：3

package 第八章_贪心算法和动态规划;

import java.util.Arrays;
import java.util.Scanner;

public class 区间调度问题 {
		public static void main(String[] args) {
			Scanner sc = new Scanner(System.in);
			int n = sc.nextInt();
			int[] s = new int[n];	
			int[] t = new int[n];
			for (int i = 0; i < n; i++) {
				s[i] = sc.nextInt();
			}
			for (int i = 0; i < n; i++) {
				t[i] = sc.nextInt();
			}
			Work[] works = new Work[n];
			for (int i = 0; i < n; i++) {
				works[i] = new Work(s[i], t[i]);
			}
			//将每个工作按照结束时间排序
			Arrays.sort(works);
			//首先完成结束时间最早的这项工作
			int cut = 1;	//计数器
			int last = works[0].t;	//存储每次工作之后的时间
			for (int i = 1; i < n; i++) {
				//每找到一个开始时间大于最后工作时间的工作，就去完成这项工作
				if (works[i].s > last) {
					cut ++;
					last = works[i].t;
				}
			}
			System.out.println(cut);
		}
		/**
		 * 定义Work类，封装开始时间s和结束时间t，实现排序规则
		 */
		private static class Work implements Comparable<Work> {
			int s;
			int t;
			public Work(int s, int t) {
				this.s = s;
				this.t = t;
			}
			/**
			 * 按照结束时间最早排序
			 */
			@Override
			public int compareTo(Work o) {
				// TODO Auto-generated method stub
				return this.t - o.t;
			}
	}
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
8.1.4 区间选点问题
题目：有多个不同的区间，他们有的交叉，有的包含。求最少的点数，使得其在所有的区间中。

和上一个题类似，选择区间结束最早的为第一个点。

给出n个闭整数区间[ai，bi]和n个整数C1，.，Cn。

编写一个程序：
从标准输入读取间隔的数目、它们的端点和整数c1、.、cn，
计算具有区间[ai，bi]的至少ci公共元素的整数集Z的最小大小，对于每一个i=1，2，.，n，
将答案写入标准输出。

输入：

输入的第一行包含整数n(1<=n<=50000)-间隔数。下面n行描述间隔。输入的(i+1)-第一行包含由单个空格分隔的三个整数ai、bi 和ci，使得0<=ai<=bi<=50000和1<=ci<=bi-ai+1。

输出：

输出包含一个整数，等于集合Z的最小大小，对于每一个i=1，2，.，n至少具有区间[ai，bi]的Ci元素。

样本输入：

5
3 7 3
8 10 3
6 8 1
1 3 1
10 11 1

样本输出

6

思路：
将所有区间按照bi从小到大排序，循环所有区间，从每个区间的bi处向前打点，在坐标轴上打点之前统计这个区间的需要的打点数，循环结束，打点器累加的值即为答案。

import java.util.Arrays;
import java.util.Scanner;
  
  public class 区间选点问题 {
      public static void main(String[] args) {
          Scanner sc = new Scanner(System.in);
          int n = sc.nextInt();
          Interval[] intervals = new Interval[n];
          for (int i = 0; i < n; i++) {
             intervals[i] = new Interval(sc.nextInt(), sc.nextInt(), sc.nextInt());
         }
         Arrays.sort(intervals);// 按区间右端点排序
 
         int max = intervals[n - 1].t;// 右端最大值
         int[] axis = new int[max + 1];// 标记数轴上的点是否已经被选中
         // int[] sums = new int[max + 1];
         for (int i = 0; i < n; i++) {
             // 1.查阅区间中有多少个点
             int s = intervals[i].s;// 起点
             int t = intervals[i].t;// 终点
             int cnt = sum(axis, s, t);// 找到这个区间已经选点的数量，
                                         //sums[t] - sums[s - 1]; 效率低
             // 2.如果不够，从区间右端开始标记，遇标记过的就跳过
              intervals[i].c -= cnt;// 需要新增的点的数量
             while (intervals[i].c > 0)
             if (axis[t] == 0) {// 从区间终点开始选点
                     axis[t] = 1;
                     // updateSums(t,sums);//更新前缀和
                     intervals[i].c--;// 进一步减少需要新增的点的数量
                     t--;
                 } else {// 这个点已经被选过了
                     t--;
                 }
             }
 
         }
         System.out.println(sum(axis, 0, max));
     }
 
     /**
      * 统计数轴axis上s-t区间已经有多少个点被选中
      * 
      * @param axis
      * @param s
      * @param t
      * @return
      */
     private static int sum(int[] axis, int s, int t) {
         int sum = 0;
         for (int i = s; i <= t; i++) {
             sum += axis[i];
         }
         return sum;
     }
 
     private static void updateSums(int t, int[] sums) {
         for (int i = t; i < sums.length; i++) {
             sums[i]++;
         }
     }
 
     private static class Interval implements Comparable<Interval> {
         int s;
         int t;
         int c;
 
         public Interval(int s, int t, int c) {
             this.s = s;
             this.t = t;
             this.c = c;
         }
 
         @Override
         public int compareTo(Interval other) {
             int x = this.t - other.t;
             if (x == 0)
                 return this.s - other.s;
             else
                 return x;
         }
     }
 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
8.1.4 字典序最小问题
题目：给一个定长为N的字符串S，构造一个字符串T，长度也为N。

起初，T是一个空串，随后反复进行下列任意操作

1、从S的头部删除一个字符，加到T的尾部。

2、从S的尾部删除一个字符，加到T的头部。

目标是最后生成的字符串T的字典序尽可能小。

输入：字符串S ACDBCB

输出：字符串T ABCBCD

每次选开头和结尾较大者放入新的字符串的末尾，不过需要注意的是，当首尾相同时需要比较前后的下一个（即左边的右边一个和右边的左边一个）的大小，下一个是较小的那个放入新的字符串。

import java.util.*;
public class Main{
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		String str = "";
		for(int i = 0;i < n;i++) {
			str += sc.next();
		}
		char ch[] = str.toCharArray();
		int begin = 0;
		int end = ch.length-1;
		int count = 0;
		while(begin <= end) {
			boolean flag = false;
			for(int i = 0;i+begin <= end;i++) {
				if(ch[begin+i] < ch[end-i]) {
					flag = true;
					count++;
					break;
				}
				else {
					flag = false;
					count++;
					break;
				}
			}
			if(flag) {
				System.out.print(ch[begin++]);
			}
			else {
				System.out.print(ch[end--]);
			}
			if(count%80==0) {
				System.out.println();
			}
		}
		System.out.println();
		sc.close();
	}
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
8.1.5 最优装载问题
题目:给定 N 个物体，第 i 个物体的质量为 Wi ,选择尽量多的物体，使其总量不超过C。

import java.util.Arrays;

/**
 * 最优装载问题（贪心算法） 
 */
public class LoadingProblem {
	private static int[] x; 

	/**
	 * 
	 * @param c 总重量
	 * @param w 每个集装箱的重量
	 * @param x 记录是否装入 （1： 装入    0： 不装入）
	 * @return
	 */
	public static float Loading(float c, float[] w, int[] x) {
		int n = w.length;
		Element[] d = new Element[n];
		for (int i = 0; i < n; i++) {
			// 初始化
			d[i] = new Element(w[i], i);
		}
		Arrays.sort(d);
		// 记录最优值
		float opt = 0;
		for (int i = 0; i < n; i++) {
			// 初始化 
			x[i] = 0;
		}
		for (int i = 0; i < n && d[i].w <= c; i++) {
			x[d[i].i] = 1;
			opt += d[i].w;
			c -= d[i].w;
		}
		return opt;
	}
	
	public static void main(String[] args) {
		float c = 10;
		float[] w = new float[]{4, 2, 5, 1, 3};
		x = new int[w.length];
		float opt = Loading(c, w, x);
		System.out.println("最优值为: " + opt);
		System.out.println("最优解为： " + Arrays.toString(x));
	}
	
	public static class Element implements Comparable<Element> {
		float w;
		int i;
		
		public Element(float w, int i) {
			this.w = w;
			this.i = i;
		}
		
		/**
		 * 按照升序排列
		 */
		@Override
		public int compareTo(Element o) {
			if (this.w < o.w) 
				return -1;
			else if (this.w == o.w)
				return 0;
			else 
				return 1;
		}
	}
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
8.1.6 乘船问题
题目：有N个人，第i个人的重量为 Wi ，每艘船的最大载重为C，且最多只能乘两个人。用最少的船装载所有的人。

贪心策略：考虑最轻的人，如果每个人都无法与他一起坐船，则唯一的方案是每个人做一艘，否则，他应该选择能和他一起坐船的人中最中的那个。

import java.util.Arrays;
import java.util.Scanner;
public class 乘船问题 {
    //乘船问题
    //有n个人，第i个人重量为wi。每艘船的最大载重量均为C，
    // 且最多只能乘两个人。用最少的船装载所有人。
    public  static int solve(int []w,int C)
    {
        int n=w.length;//人数
        int st=0;//定义开始和结束指针
        int et=w.length-1;
        int out=0;//要返回的船只的个数
        while(n>0)
        {
            if (w[st]>=C)//若最小的人的重量大于C
            {
                out=w.length;
                  break;
            }
            if (w[st]+w[et]<=C)//若开始和结束的重量小于C
            {
                out++;
                n-=2;
                st++;
                et--;
            }
            else//若开始和结束的重量大于C
            {
                out++;
                et--;
                n--;
            }
        }
        return out;
    }
    public static void main(String[] args) {
        Scanner a=new Scanner(System.in);
        int n=a.nextInt();//输入人数n
        int []w=new int[n];//输入每个人的重量
        for (int i = 0; i <n ; i++) {
            w[i]=a.nextInt();
        }
        Arrays.sort(w);//对体重进行排序
        int C=a.nextInt();//输入最大载重量
        int out=solve(w,C);
        System.out.println(out);
    }
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
8.2 动态规划
动态规划方法代表了这一类问题(最优子结构 || 子问题的最优性 || 重叠子问题 ) 的一般解法，是设计方法或者策略，不是具体算法。

本质是递推，核心是找到状态转移的方式，写出dp方程

形式：

​ 记忆性递归

​ 递推

8.2.1 01背包问题
有N个重量和价值分别为 Wi ，Vi，的物品，从这些物品中挑选出纵质量不超过W的物品。求所有挑选方案中的价值总和最大值。

输入：

n = 4

(w,v) = {(2,3),(1,2),(3,4),(2,2)}

W = 5

输出：

7（选择0 1 3号物品）

因为对每个物品只有选和不选两种情况，所以成为01规划问题

f (i, j) : 当背包容量为 J ， 挑出 i 件商品的最大价值。

题目即求：f(4，5)

 
import java.util.*;
 
public class 01背包问题{
 
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while (sc.hasNext()) {
 
			/* 1.读取数据 */
 
			int number = sc.nextInt(); // 物品的数量
 
			// 注意：我们声明数组的长度为"n+1",并另score[0]和time[0]等于0。
			// 从而使得 数组的下标，对应于题目的序号。即score[1]对应于第一题的分数,time[1]对应于第一题的时间
			int[] weight = new int[number + 1]; // {0,2,3,4,5} 每个物品对应的重量
			int[] value = new int[number + 1]; // {0,3,4,5,6} 每个物品对应的价值
 
			weight[0] = 0;
			for (int i = 1; i < number + 1; i++) {
				weight[i] = sc.nextInt();
			}
 
			value[0] = 0;
			for (int i = 1; i < number + 1; i++) {
				value[i] = sc.nextInt();
			}
 
			int capacity = sc.nextInt(); // 背包容量
 
			/* 2.求解01背包问题 */
 
			int[][] v = new int[number + 1][capacity + 1];// 声明动态规划表.其中v[i][j]对应于：当前有i个物品可选，并且当前背包的容量为j时，我们能得到的最大价值
 
			// 填动态规划表。当前有i个物品可选，并且当前背包的容量为j。
			for (int i = 0; i < number + 1; i++) {
				for (int j = 0; j < capacity + 1; j++) {
					if (i == 0) {
						v[i][j] = 0; // 边界情况：若只有0道题目可以选做，那只能得到0分。所以令V(0,j)=0
					} else if (j == 0) {
						v[i][j] = 0; // 边界情况：若只有0分钟的考试时间，那也只能得0分。所以令V(i,0)=0
					} else {
						if (j < weight[i]) {
							v[i][j] = v[i - 1][j];// 包的容量比当前该物品体积小，装不下，此时的价值与前i-1个的价值是一样的，即V(i,j)=V(i-1,j)；
						} else {
							v[i][j] = Math.max(v[i - 1][j], v[i - 1][j - weight[i]] + value[i]);// 还有足够的容量可以装当前该物品，但装了当前物品也不一定达到当前最优价值，所以在装与不装之间选择最优的一个，即V(i,j)=max｛V(i-1,j)，V(i-1,j-w(i))+v(i)｝。
						}
					}
				}
			}
 
			System.out.println();
			System.out.println("动态规划表如下：");
			for (int i = 0; i < number + 1; i++) {
				for (int j = 0; j < capacity + 1; j++) {
					System.out.print(v[i][j] + "\t");
				}
				System.out.println();
			}
			System.out.println("背包内最大的物品价值总和为：" + v[number][capacity]);// 有number个物品可选，且背包的容量为capacity的情况下，能装入背包的最大价值
 
			/* 3.价值最大时，包内装入了哪些物品？ */
 
			int[] item = new int[number + 1];// 下标i对应的物品若被选中，设置值为1
			Arrays.fill(item, 0);// 将数组item的所有元素初始化为0
 
			// 从最优解，倒推回去找
			int j = capacity;
			for (int i = number; i > 0; i--) {
				if (v[i][j] > v[i - 1][j]) {// 在最优解中，v[i][j]>v[i-1][j]说明选择了第i个商品
					item[i] = 1;
					j = j - weight[i];
				}
			}
 
			System.out.print("包内物品的编号为：");
			for (int i = 0; i < number + 1; i++) {
				if (item[i] == 1) {
					System.out.print(i + " ");
				}
			}
			System.out.println("----------------------------");
 
		}
 
	}
 
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
8.2.2 钢条切割
Serling公司购买长钢条，将其切割为短钢条出售。切割工序本身没有成本支出。公司管理层希望知道最佳的切割方案。
假定我们知道Serling公司出售一段长为i英寸的钢条的价格为pi(i=1,2,…，单位为美元)。钢条的长度均为整英寸。

| 长度i | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |
价格pi | 1 | 5 | 8 | 16 | 10 | 17 | 17 | 20 | 24 | 30 |

import java.util.Scanner;
import static java.lang.Math.max;
public class 钢条切割{
    static int rec[];
    public static void main(String[] args) {
        //下面使用动态规划来进行解决,关键是要求出变化的量在哪里,我们可以使用excel表格来进行打表帮助我们更好地理解
        //以便求出最佳的切割方案
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int v[] = new int[n];
        for(int i = 0; i < n; i++){
            v[i] = sc.nextInt();
        }
        dp(v, n);
        sc.close();
    }
    private static void dp(int[] v, int n){
        rec = new int[n + 1];
        for(int i = 1; i < n + 1; i++){
            for(int j = 1; j <= i; j++){
                //前面的是保留的是整对的长度,后面的是需要切割钢条的剩余长度的最佳切割方案
                rec[i] = max(v[j - 1] + rec[i - j], rec[i]);
            }
        }    
                System.out.println(rec[n]);
    }
}


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
文章知识点与官方知识档案匹配，可进一步学习相关知识
算法技能树首页概览37555 人正在系统学习中

clap_code
关注

1


0
打赏

0

poj 1201
spnooyseed的博客
 167
差分约数 Intervals 差分约束详解 转 https://blog.csdn.net/whereisherofrom/article/details/78922648 他这个一看就懂 Intervals Time Limit: 2000MS Memory Limit: 65536K Total Submissions: 32784 Accepted: 12667 Description...
蓝桥杯 算法练习 拦截导弹
最新发布
他人世界末的博客
 7
蓝桥杯算法 动态规划
蓝桥杯算法竞赛系列第八章——提高篇之广度优先搜索(BFS)_安然无虞的...
2-9
六、蓝桥结语:遇见蓝桥遇见你,不负代码不负卿! 【前言】 搜索算法在蓝桥中考的还是很频繁的,之前发表了二叉树数据结构以及深度优先搜索章节,前面还是比较简单的,这里的广度优先搜索可能稍微复杂那么一丢丢,因为要用到队列,不过我们可以使...
最全的2021蓝桥杯算法课《算法很美》的学习笔记总目录+真题详解
2-14
蓝桥云课《算法很美》1.8 1.9出现k次与出现1次 第二章 递归 手把手带你解析蓝桥云课《算法很美》–2.1什么是递归 手把手带你解析蓝桥云课《算法很美》–2.2切蛋糕思维:递归知识练习题 手把手带你解析蓝桥云课《算法很美》–2.3多...
python笔记5 - 字符串格式化表达式，while语句嵌套，for循环，break，continue，死循环
sinat_27864123的博客
 707
2017/9/29 字符串格式化表达式，while语句嵌套，for循环，break，continue，死循环   ===================================================================== 技巧： subl中按ctrl+shift+上（下）键，能够上下移动光标所在的行数据 =========================
解决最优子结构问题的两种方法----动态规划和贪心算法
weixin_33858336的博客
 1040
2019独角兽企业重金招聘Python工程师标准>>> ...
蓝桥杯基础算法-八大排序算法之插入排序_effort I的博客
2-2
文章标签: 排序算法 算法 数据结构 c语言 蓝桥杯 版权 插入排序的原理就是,将一串数字划为有序部分与无序部分,若无法判断有序部分时,可以将第一位数字作为有序部分,然后从第二位开始依次与前一位比较大小,符合大小条件就交换位置,...
蓝桥算法训练__普及组.Day4_Snippet~的博客
2-9
第二题:P1678 烦恼的高考志愿 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn) package 蓝桥算法训练__普及组.Day4; import java.util.Arrays; import java.util.Scanner; /** * @author snippet ...
五大常用经典算法-分治-动态规划-贪心-回溯-分支限界
zhangvalue的博客
 289
在求解某问题时，经过分析发现该问题具有最优子结构和重叠子问题性质。则适用(动态规划)算法设计策略得到最优解。 若了解问题的解空间，并以广度优先的方式搜索解空间,则采用的是(分支限界)算法策略。 A．动态规则B．贪心C．回溯D、分支限界E、分治 要想直接解决一个较大的问题，有时是相当困难的，分治法的设计思想是将一个难以解决的大问题分解成一些规模较小的相同问题，以便各个击破，分而治之。 动态规划法与分治法类似，其基本思想也是将带求解问题分解为若干个子问题，先求解子问题再从这些子问题的解得到原问题的..
最优子结构性质 贪心算法详解
05-07
贪心算法通过一系列的选择来得到一个问题的解。它所作的每一个选择都是当前状态下某种意义的最好选择，即贪心选择。希望通过每次所作的贪心选择导致最终结果是问题的一个最优解。这种启发式的策略并不总能奏效，然而在许多情况下确能达到预期的目的。解活动安排问题的贪心算法就是一个例子。下面我们着重讨论可以用贪心算法求解的问题的一般特征。
蓝桥杯算法第八届省赛 拉马车 (超详细注释,c++)_莉诺尔啊啊啊的博客...
1-25
蓝桥杯算法第八届省赛 拉马车 (超详细注释,c++) 标题:拉马车 小的时候,你玩过纸牌游戏吗? 有一种叫做“拉马车”的游戏,规则很简单,却很吸引小朋友。 其规则简述如下: 假设参加游戏的小朋友是A和B,游戏开始的时候,他们得到的...
蓝桥-算法训练 ALGO-8 操作格子【线段树 | 单点修改 | 区间求和 | 区 ...
12-7
有n个格子,从左到右放成一排,编号为1-n。 共有m次操作,有3种操作类型: 1.修改一个格子的权值, 2.求连续一段格子权值和, 3.求连续一段格子的最大值。 对于每个2、3操作输出你所求出的结果。
贪心算法详解
qq_44622401的博客
 1189
贪心算法： 总是作出当前看来最好的选择。也就是说贪心算法并不从整体最优考虑，他所做出的选择只是在某种意义上的局部最优选择。但对许多问题它能产生整体最优解。在一些情况下，即使贪心算法不能得到整体最优解，其最终结果却是最优解的很好近似。 应用贪心思想的常用问题：单源最短路径问题，最小生成树问题，哈夫曼编码问题。 可以用贪心算法求解的问题一般具有两个性质 1.贪心选择性质: 整体最优解可以通过一系列局部...
贪心算法，最优子结构，动态规划简述
HYbuery的博客
 4846
参考https://www.cnblogs.com/gavanwanggw/p/7141358.html 一、贪心算法 体现贪心：不从整体考虑，用局部的，仅有数据做出选择，且以后不会改变。 二、动态规划 动态规划其实就是用来解决最优化问题的。 具有三个性质：1.最优子结构性质    2.子问题重叠性质 3.自底而上的求解方法 动态规划问题其实就是一道从局部到整体的递推问题，子结构最优使...
蓝桥杯算法练习笔记(8)__抽象的深度搜索_耿鬼不会笑的博客
2-3
[r+i]=x2[r-i+8]=true; //r-i+8 防止负坐标 dfs(r+1); col[i]=x1[r+i]=x2[r-i+8]=false; } } } int main(){ dfs(0); cout<<ans<<endl; return 0; } /*没有输入,输出 92 八皇后问题有92组解 *...
PAT第八章专题复习_梦想总比行动多的博客
1-22
PAT第八章专题复习 本章的算法笔记上的题目已做,蓝桥杯题目大致看了一下。 dfs题 题目描述【PAT A 1103】,分解因子 思路: ①用dfs做思路是清晰的,不过自己在写dfs时超时了。在选择最优解时,时间复杂度不是O(1),导致超时。
算法-贪心
三省的博客
 135
文章目录贪心活动安排问题 贪心 能采用贪心算法求最优解的问题，一般具有的重要性质为：最优子结构性质与贪心选择性质。 贪心选择性质是指问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来得到，这是贪心法和动态规划法的主要区别。 贪心法的求解过程： 把求解的问题分成若干个子问题 对每个子问题求解，得到子问题的局部最优解 把子问题的解局部最优解合成原来解问题的一个解 虽然贪心法每一步都能获得局部最优解，但由此产生的全局解有时不一定是最优的。 活动安排问题 设有n个活动的集合E={1,2,..,n}E=\
哈夫曼问题的贪心选择性质和最优子结构性质证明
qq_35557801的博客
 7051
1. 试证明哈夫曼问题具有贪心选择性质： 二叉树T表示字符集C的一个最优前缀码，证明可以对T作适当修改后得到一棵新的二叉树T”，在T”中x和y是最深叶子且为兄弟，同时T”表示的前缀码也是C的最优前缀码。设b和c是二叉树T的最深叶子，且为兄弟。设f(b)<=f(c)，f(x)<=f(y)。由于x和y是C中具有最小频率的两个字符，有f(x)<=f(b)，f(y)<=f(c)...
蓝桥杯 算法训练 ALGO-8 操作格子(待优化) c/c++_博__弈的博客-CSDN博 ...
12-12
有n个格子,从左到右放成一排,编号为1-n。 共有m次操作,有3种操作类型: 1.修改一个格子的权值, 2.求连续一段格子权值和, 3.求连续一段格子的最大值。 对于每个2、3操作输出你所求出的结果。
贪心算法：贪心选择性和最优子结构
ZhifanSk的博客
 7887
贪心选择性 每一步贪心选出来的一定是原问题的最优解的一部分 最优子结构 每一步贪心选完后会留下子问题，子问题的最优解和贪心选出来的解可以凑成原问题的最优解 如果问题的最优解包含两个或更多子问题的最优解，且子问题多有重叠，我们考虑使用动态规划算法。 而如果问题经过贪心选择后，只剩下一个子问题，且具有优化子结构，那么可以使用贪心算法。 活动选择问题 哈夫曼编码 HUFFMAN 01背包 生成哈夫曼树 最小生成树 kruskal
动态规划（dynamic programming）（二、最优子问题与重叠子问题，以及与贪心的区别）...
weixin_30608131的博客
 83
一、动态规划基础 　　虽然我们在（一）中讨论过动态规划的装配线问题，但是究竟什么时候使用动态规划?那么我们就要清楚动态规划方法的最优化问题中的两个要素：最优子结构和重叠子问题。 　　1、最优子结构 　　　　1）如果问题的一个最优解包含了子问题的最优解，则该问题具有最优子结构。当一个问题具有最优子结构的时候，我们就可能要用到动态规划（贪心策略也是有可能适用的）。 　　　　2）寻找最优子结构时...
笔试题总结：贪心算法（或动态规划）
weixin_30263073的博客
 261
概念： 当一个问题具有最优子结构性质时，可用动态规划算法，有时会有更简单有效的算法，那就是贪心算法，贪心算法是通过一系列的选择来得到问题的解，贪心算法并不从整体最优上加以考虑，所做的选择只是在某种意义上的局部最优解。但对范围相当广的许多问题能产生整体最优解。在一些情况下，即使贪心算法不能得到整体最优解，但其最终结果却是最优解的很好的近似解。 贪心算法的基本要素： 贪心选择性质：所求...
最优子结构性质
牛牛码特的博客
 2702
当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用贪心法求解的关键所在。在实际应用中，至于什么问题具有什么样的贪心选择性质是不确定的，需要具体问题具体分析。 ...
动态规划
chl290115231的专栏
 398
动态规划   应用动态规划方法求解的最优化问题应该具备的两个要素： 1、最优子结构 2、子问题重叠     最优子结构   如果一个问题的最优解包含其子问题的最优解，则称该问题具有最优子结构性质。动态规划方法要求问题具有这样性质，是因为在动态规划方法中，一个问题的最优解是通过组合子问题的最优解得到的。   确定一个问题是否具有最优子结构性质的方法： 1、一个问题是否可以划分
证明kruskal算法求解图的最小生成树具有贪心选择性质_贪心算法如何贪心
weixin_39603598的博客
 514
在前面学习最短路径和最小生成树的时候，我们发现Dijkstra算法，Prim算法，Kruskal算法都是属于 贪心算法的应用。这篇文章就是对于贪心算法的入门介绍贪心算法贪心算法(又称贪婪算法)是指在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须...
动态规划性质；以及遇到一个问题，为什么能够使用动态规划
wang2011210219的博客
 1392
关于动态规划之前刷过一些相关的题，但都是类似背包问题、爬楼梯问题，那时候觉得这个算法挺简单。直到最近在看jieba的源码，其中两次使用到动态规划，一次是很有名的viterbi算法，另一次是在有向无环图中查找最优分词序列时。在看这两部分的源码时感觉自己对动态规划的理解太过浅薄，于是重新翻看《算法导论》的第15.3节----动态规划原理。觉得理解了一个问题为什么能够使用动态规划？拿到一个问题时，如何判...
4-3 最优装载（贪心）
清木QMU的博客
 82
有一批集装箱要装上一艘载重量为c的轮船。其中集装箱i的重量为wi。最优装载问题要求确定在装载体积不受限制的情况下，将尽可能多的集装箱装上轮船。
“相关推荐”对你有帮助么？

非常没帮助

没帮助

一般

有帮助

非常有帮助
©️2022 CSDN 皮肤主题：数字20 设计师：CSDN官方博客 沉浸阅读: CSDN浏览器助手 返回首页
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2023北京创新乐知网络技术有限公司
目录
8 贪心策略与动态规划
8.1 贪心策略
8.1.1 硬币问题
8.1.2 快速渡河
8.1.3 区间调度问题
8.1.4 区间选点问题
8.1.4 字典序最小问题
8.1.5 最优装载问题
8.1.6 乘船问题
8.2 动态规划
8.2.1 01背包问题
8.2.2 钢条切割





×
拖拽到此处
图片将完成下载
