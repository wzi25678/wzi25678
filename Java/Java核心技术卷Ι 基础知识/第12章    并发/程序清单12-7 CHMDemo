/**
package day11_17;*/
/*
@Author Wzi
@Create_Date 2019/10/4 15:09
*
*//**


import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CHMDemo {
    public static ConcurrentHashMap<String,Long> map = new ConcurrentHashMap<>();
    public static void process(Path file){
        try(var in = new Scanner(file)){
            while (in.hasNext()){
                String word = in.next();
                map.merge(word,1L,long::sum);
            }//end while
        }//end try
        catch (IOException e){
            e.printStackTrace();
        }
    }//end process
    
    public static Set<Path> descendants(Path rootDir) throws IOException{
        try (Stream<Path> entries = Files.walk(rootDir)){
            return entries.collect(Collectors.toSet());
        }
    }//end descendants

public static void main(String [] args) throws InterruptedException, ExecutionException,IOException { 
        int processors = Runtime.getRuntime().availableProcessors();
        ExecutorService executor  = Executors.newFixedThreadPool(processors);
        Path pathToRoot = Path.of(".");
        for (Path p : descendants(pathToRoot)){
            if (p.getFileName().toString().endsWith(".java")) {
                executor.execute(() -> process(p));
            }
        }
        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.MINUTES);
        map.forEach(k,v) -> {
            if (v >= 10){
                System.out.println(k + " occurs " + v + " times.");
            }
    };
    }
}//end class- CHMDemo

*/
