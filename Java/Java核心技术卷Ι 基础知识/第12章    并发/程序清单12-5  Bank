
package day11_16;

import java.util.Arrays;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/*
@Author Wzi
@Create_Date 2019/10/4 15:09
*
*/
public class Bank {
    private final double [] accounts;

    public Bank(int n,double initialBalance) {
        accounts = new double[n];
        Arrays.fill(accounts,initialBalance);
    }
    
    public synchronized void transfer (int from ,int to ,double amount) throws InterruptedException
    {
        while (accounts[from] < amount){
            wait();
        }
        System.out.println(Thread.currentThread());
        accounts[from]-=amount;
        System.out.printf(" %10.2f from %d to %d",amount,from,to);
        accounts[to] +=amount;
        System.out.printf(" Total Balance : %10.2f%n",getTotalBalance());
        notifyAll();
    }

    private double getTotalBalance() {
        double sum = 0;
        for (double a : accounts)
            sum+=a;

        return sum;
    }

    public int size(){
        return accounts.length;
}

/**   public class Bank {
        private final double [] accounts;
        private Lock banklock;
        private Condition sufficientFunds;

    public Bank(int n,double initialBalance) {
        accounts = new double[n];
        Arrays.fill(accounts,initialBalance);
        banklock = new ReentrantLock();
        sufficientFunds = banklock.newCondition();
    }//end Construction-Bank

    public void transfer(int from ,int to ,double amount) throws InterruptedException
    {
         banklock.lock();
         try{
             while (accounts[from] < amount)
                 sufficientFunds.await();
             System.out.println(Thread.currentThread());
             accounts[from]-=amount;
             System.out.printf(" %10.2f from %d to %d",amount,from,to);
             accounts[to] +=amount;
             System.out.printf(" Total Balance : %10.2f%n",getTotalBalance());
             sufficientFunds.signalAll();
         }
         finally {
             banklock.unlock();
         }
    }//end transfer

    private double getTotalBalance() {
        banklock.lock();
        try {
            double sum = 0;
            for (double a :accounts)
                sum+=a;
            return sum;
        }
        finally {
            banklock.unlock();
        }
    }

    public int size(){
        return accounts.length;
    }

}*/

/**
import java.util.Arrays;

public class Bank {
    private final double [] accounts;

    public Bank(int n,double initialBalance) {
        accounts = new double[n];
        Arrays.fill(accounts,initialBalance);
    }

    public void transfer(int from ,int to ,double amount){
        if (accounts[from] < amount)    return;
        System.out.println(Thread.currentThread());
        accounts[from] -= amount;
        System.out.printf(" %10.2f from %d to %d",amount,from,to);
        accounts[to]+=amount;
        System.out.printf(" Total balance: %10.2f%n",getTotalBalance());
    }

    private double getTotalBalance() {
        double sum = 0;
        for (double a : accounts)
            sum+=a;

        return sum;
    }

    public int size(){
        return accounts.length;
    }
}
*/
