import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Scanner;
/*
设r是个2^k 进制数，并满足以下条件：
（1）r至少是个2位的2^k 进制数。
（2）作为2^k 进制数，除最后一位外，r的每一位严格小于它右边相邻的那一位。
（3）将r转换为2进制数q后，则q的总位数不超过w。
在这里，正整数k（1≤k≤9）和w（k〈w≤30000）是事先给定的。



输入一行，用空格隔开的两个字符串
        输入字符串长度最长为100，区分大小写。
 */
public class Main {
    public static void main(String[] args) throws IOException {
//       // Scanner scanner = new Scanner(System.in);
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        String str = br.readLine();
//        String s1 = str.split(" +")[0];
//        String s2 = str.split(" +")[1];
////        System.out.println(s1);
////        System.out.println(s2);
//        char ch1[] = s1.toCharArray();
//        char ch2[] = s2.toCharArray();
//        int MaxCount = 0;
//        for (int i=0;i<ch1.length;i++){
//            int temp = 0;
//            int index = i;
//            for (int j=0;j<ch2.length;j++){
//                //　输入字符串长度最长为100，区分大小写。
//                if (ch1[i]==ch2[j]){
//                    temp++;
//                    i++;    
//                }
//                else {
//                    //如果不想等，则往后遍历j
//                }
//            }
//        }
//
//
        BufferedReader br = new BufferedReader(
                new InputStreamReader(System.in));
        String str = br.readLine();
        String s1 = str.split(" +")[0];
        String s2 = str.split(" +")[1];

        char[] ch1 = s1.toCharArray();
        char[] ch2 = s2.toCharArray();
        int[][] dp = new int[ch1.length][ch2.length];

        for (int i = 0; i < ch1.length; i++) {
            for (int j = 0; j < ch2.length; j++) {
                if (ch1[i] == ch2[j]) {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = Math.max(dp[i][j - 1] + 1, dp[i - 1][j]);
                    }
                } else {
                    if (i == 0 && j == 0) {
                        dp[i][j] = 0;
                    } else if (i == 0) {
                        dp[i][j] = dp[i][j - 1];
                    } else if (j == 0) {
                        dp[i][j] = dp[i - 1][j];
                    }else {
                        dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                    }
                }
            }
        }

        System.out.println(dp[ch1.length - 1][ch2.length - 1]);
    }

}
